@model ProjectPortfolio.Models.ViewModels.DashboardClassesCollection

@{
    ViewBag.Title = "Nøgletal";
}


<script src="~/Scripts/d3.min.js" )></script>
<div class="row">
    <h3>Samlet årligt projektbudget</h3>
    <div id="budgetBarChart" class="chart" style="padding-top: 50px"></div>
</div>
@* End of barchart row *@
<div class="row">
    <h3>Indsatsområder</h3>
    <div id="themePieChart" class="chart" ></div>
</div>
@* End of piechart row *@
    <script>
        (function (d3) {



            (function (data) {

                var dataArray = Object.keys(data).map(function (k) { return data[k] });

                dataArray.sort(function (a, b) { return a.Year - b.Year });


                console.log("Length: " + dataArray.length);


                var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                    width = 700 - margin.left - margin.right,
                    height = 350 - margin.top - margin.bottom,
                    sortOrder = true;

                var color = d3.scaleOrdinal(d3.schemeCategory10);

                //Ranges
                var x = d3.scaleBand()
                .range([0, width])
                .padding(0.1)
                .domain(d3.range(dataArray.length));

                var y = d3.scaleLinear()
                .range([0, height])
                .domain([0, d3.max(data, function (d) { return d.Budget })]);


                var svg = d3.select("#budgetBarChart").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);


                svg.selectAll("rect")
                .data(dataArray)
                .enter()
                .append("rect")
                .attr("x", function (d, i) { return x(i) })
                .attr("y", function (d) { return height - y(d.Budget) })
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return y(d.Budget) })
                .attr("fill", function (d, i) { return color(d.Year) })
                .on("click", function () { sortBars() })
                .on("mouseover", function (d) {
                    //Get this bars x and y values
                    var xPosition = parseFloat(d3.select(this).attr("x")) + x.bandwidth() / 2;
                    var yPosition = parseFloat(d3.select(this).attr("y")) + 14;
                    svg.append("text")
                        .attr("id", "tooltip")
                        .attr("x", xPosition)
                        .attr("y", yPosition + 15)
                        .attr("text-anchor", "middle")
                        .attr("font-family", "sans-serif")
                        .attr("font-size", "11px")
                        .attr("font-weight", "bold")
                        .attr("fill", "black")
                        .text("Samlet budget: " + d.Budget.toLocaleString() + " kr.");
                })
                .on("mouseout", function () {
                    //Remove the tooltip
                    d3.select("#tooltip").remove();
                });


                var labels = svg.selectAll("text")
                .data(dataArray)
                .enter()
                .append("text")
                .attr("x", function (d, i) {
                    return x(i) + (x.bandwidth() / 2)
                })
                .attr("y", function (d) {
                    return height - y(d.Budget) + 15;
                })
                .attr("text-anchor", "middle")
                .text(function (d) { return d.Year; })
                .attr("style", "font-weight: bold");





                var sortBars = function () {
                    sortOrder = !sortOrder;



                    svg.selectAll("rect")
                        .sort(function (a, b) {
                            if (sortOrder)
                                return d3.ascending(a.Year, b.Year);
                            else
                                return d3.ascending(a.Budget, b.Budget);
                        })
                        .transition().delay(function (d, i) { return i * 50 }).duration(1000)
                        .attr("x", function (d, i) {
                            return x(i);
                        });

                    labels
                        .sort(function (a, b) {
                            if (sortOrder)
                                return d3.ascending(a.Year, b.Year);
                            else
                                return d3.ascending(a.Budget, b.Budget);
                        })
                        .transition().delay(function (d, i) { return i * 50 }).duration(1000)
                        .attr("x", function (d, i) {
                            return x(i) + (x.bandwidth() / 2);
                        });


                }


            })(@Html.Raw(Json.Encode(@Model.BudgetList)));


            (function (data) {

                var PieData = Object.keys(data).map(function (k) { return data[k] });
                console.log("Length: " + PieData.length);
                
                PieData.forEach(function (d) {
                    d.NoProjects = +d.NoProjects;
                    d.enabled = true;

                });


                var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                    width = 700 - margin.left - margin.right,
                    height = 700 - margin.top - margin.bottom,
                    radius = Math.min(width, height) / 2,
                    donutWidth = 75;

                var color = d3.scaleOrdinal(d3.schemeCategory10);

                var tooltip = d3.select("#themePieChart").append("div").attr("class", "pietooltip");
                tooltip.append("div").attr("class", "pielabel");
                tooltip.append("div").attr("class", "piecount");
                tooltip.append("div").attr("class", "piepercent");

                var svg = d3.select("#themePieChart").append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");

                var arc = d3.arc().innerRadius(radius - donutWidth).outerRadius(radius);

                var pie = d3.pie().value(function (d) { return d.NoProjects }).sort(null);

                var path = svg.selectAll("path")
                        .data(pie(PieData))
                        .enter()
                        .append("path")
                        .attr("d", arc)
                        .attr("fill", function (d, i) { return color(d.data.Program); })
                        .each(function (d) { this._current = d; });
                    
                path.on("mouseover", function (d) {
                    var total = d3.sum(PieData.map(function (d) {
                        return d.NoProjects;
                    }));

                    var percent = Math.round(1000 * d.data.NoProjects / total) / 10;
                    tooltip.select(".pielabel").html("Program " + d.data.Program);
                    tooltip.select(".piecount").html("Antal: " + d.data.NoProjects);
                    tooltip.select(".piepercent").html(percent + "%");
                    tooltip.style("display", "block");

                });

                path.on("mouseout", function (d) {
                    tooltip.style('display', 'none');
                });

                path.on('mousemove', function (d) {
                    tooltip.style('top', (d3.event.layerY + 10) + 'px')
                      .style('left', (d3.event.layerX + 10) + 'px');
                });






            })(@Html.Raw(Json.Encode(@Model.ProgramList)));


        })(window.d3)



    </script>
    <div class="row">
        <div class="col-md-6">
            <h2>Igangværende projekter pr. år - budget</h2>

            <p>
                <table class="table">
                    <tr>
                        <th>
                            År
                        </th>
                        <th style="text-align:center">
                            Projekter
                        </th>
                        <th style="text-align:right">
                            Samlet budget
                        </th>
                    </tr>

                    @foreach (var group in Model.BudgetList)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => group.Year)
                            </td>
                            <td style="text-align:center">
                                @group.NoProjects
                            </td>
                            <td style="text-align:right">
                                @Html.DisplayFor(modelItem => group.Budget)
                            </td>
                        </tr>
                    }
                </table>
            </p>

        </div>

        <div class="col-md-6">
            <h2>Projekter fordelt på strategisk program</h2>
            <p>
                <table class="table">
                    <tr>
                        <th>
                            Program
                        </th>
                        <th style="text-align:right">
                            Projekter
                        </th>
                    </tr>

                    @foreach (var group in Model.ProgramList)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => group.Program)
                            </td>
                            <td style="text-align:right">
                                @Html.DisplayFor(modelItem => group.NoProjects)
                            </td>
                        </tr>
                    }
                </table>
            </p>

        </div>
    </div>
