@model ProjectPortfolio.Models.ViewModels.DashboardClassesCollection

@{
    ViewBag.Title = "Nøgletal";
}


<script src="~/Scripts/d3.min.js" )></script>
<div class="row">
    <h3>Årlige projektbevillinger</h3>
    <div id="budgetBarChart" class="chart" style="padding-top: 50px"></div>
</div>
@* End of barchart row *@

@*<div class="row">
    <h3>Bevillingstyper</h3>
    <div id="funderBarChart" class="chart" ></div>
</div>*@
@* End of barchart row *@

<div class="row">
    <h3>Indsatsområder</h3>
    <p>I diagrammet ses projekter fordelt på indsatsområder. Ved at klikke på indsatsområdet kan du zoome ind. 
        Du zoomer ud igen ved at klikke på cirklen i midten. Projekter med startdato i de tre seneste år er medtaget i diagrammet.</p>
    <div id="sunBurstChart" class="chart"></div>
</div>
@* End of sunburst row *@
    <script>


        (function (d3) {

            var TEC_colors = ["#28cdaf", "#00415a", "#fa5050", "#550041", "#cda01e", "#5a1400", "#b4a082", "#004b46", "#64becd"];

            (function (data) {

                var dataArray = Object.keys(data).map(function (k) { return data[k] });

                dataArray.sort(function (a, b) { return a.Year - b.Year });


                console.log("Length: " + dataArray.length);


                var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                    width = 700 - margin.left - margin.right,
                    height = 350 - margin.top - margin.bottom,
                    sortOrder = true;

                var color = d3.scaleOrdinal().range(TEC_colors);

                //tooltip instead of labels
                var bartooltip = d3.select("#budgetBarChart").append("div").attr("class", "tooltips");
                bartooltip.append("div").attr("class", "barlabel");
                bartooltip.append("div").attr("class", "barcount");

                //Ranges
                var x = d3.scaleBand()
                .range([0, width])
                .padding(0.1)
                .domain(d3.range(dataArray.length));

                var y = d3.scaleLinear()
                .range([0, height])
                .domain([0, d3.max(data, function (d) { return d.Budget })]);


                var svg = d3.select("#budgetBarChart").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

                svg.selectAll("rect")
                .data(dataArray)
                .enter()
                .append("rect")
                .attr("x", function (d, i) { return x(i) })
                .attr("y", function (d) { return height - y(d.Budget) })
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return y(d.Budget) })
                .attr("fill", function (d, i) { return color(d.Year) })
                .on("click", function () { sortBars() })
                .on("mouseover", function (d) {
                    bartooltip.select('.barlabel').html("Samlet budget: " + d.Budget.toLocaleString() +  " kr.");

                    bartooltip.select(".barcount").html("Antal projekter: " + d.NoProjects);

                    bartooltip.style('display', 'block');


                })
                .on("mouseout", function (d) {
                    bartooltip.style('display', 'none');
                })
                .on('mousemove', function (d) {
                    bartooltip.style('top', (d3.event.layerY + 10) + 'px')
                      .style('left', (d3.event.layerX + 10) + 'px');
                });

                //Setting up the labels (years) for the bars
                var labels = svg.selectAll("text")
                .data(dataArray)
                .enter()
                .append("text")
                .attr("x", function (d, i) {
                    return x(i) + (x.bandwidth() / 2)
                })
                .attr("y", function (d) {
                    return height - y(d.Budget) + 15;
                })
                .attr("text-anchor", "middle")
                .text(function (d) { return d.Year; });


                var sortBars = function () {
                    sortOrder = !sortOrder;



                    svg.selectAll("rect")
                        .sort(function (a, b) {
                            if (sortOrder)
                                return d3.ascending(a.Year, b.Year);
                            else
                                return d3.ascending(a.Budget, b.Budget);
                        })
                        .transition().delay(function (d, i) { return i * 50 }).duration(1000)
                        .attr("x", function (d, i) {
                            return x(i);
                        });

                    labels
                        .sort(function (a, b) {
                            if (sortOrder)
                                return d3.ascending(a.Year, b.Year);
                            else
                                return d3.ascending(a.Budget, b.Budget);
                        })
                        .transition().delay(function (d, i) { return i * 50 }).duration(1000)
                        .attr("x", function (d, i) {
                            return x(i) + (x.bandwidth() / 2);
                        });


                }


            })(@Html.Raw(Json.Encode(@Model.BudgetList)));

            (function () {
                var csvData = "@Html.Raw(HttpUtility.JavaScriptStringEncode(@ViewBag.SequencesCsv))";

                console.log("Raw:")
                console.log(csvData);

                console.log("CSV-parsing the data...")
                var table = d3.csvParse(csvData);
                console.log("Parsed(table):");
                console.log(JSON.stringify(table));


                //console.log("Setting dimensions...");
                // set the dimensions and margins of the diagram

                var width = 660,
                    height = 500,
                    radius = (Math.min(width, height) / 2) - 10;

                var color = d3.scaleOrdinal().range(TEC_colors);

                console.log("Nesting table...")
                var nest = d3.nest()
                    .key(function (d) { return d.parent; })
                    .key(function (d) { return d.child })
                    .key(function (d) { return d.project })
                    .rollup(function (d) { return d3.sum(d, function (d) { return d.budget; }); })

                    .entries(table);


                console.log("Nest(nested table):");
                console.log(JSON.stringify(nest));


                var x = d3.scaleLinear()
                    .range([0, 2 * Math.PI]);

                var y = d3.scaleSqrt()
                    .range([0, radius]);

                //Creating hierarchy..
                var root = d3.hierarchy({ values: nest }, function (d) { return d.values });

                console.log("Hierarchy(root):");
                console.log(root);





                // Creating the arcs
                var arc = d3.arc()
                    .startAngle(function (d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x0))); })
                    .endAngle(function (d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x1))); })
                    .innerRadius(function (d) { return Math.max(0, y(d.y0)); })
                    .outerRadius(function (d) { return Math.max(0, y(d.y1)); });

                // Creating svg and appending g
                var svg = d3.select("#sunBurstChart").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                  .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + (height / 2) + ")");

                // Creating the sum-value
                root.sum(function (d) { return d.value;});

                var partition = d3.partition();

                // Creating paths for all descendants
                svg.selectAll("path")
                    .data(partition(root).descendants())
                  .enter().append("path")
                    .attr("d", arc)
                    .style("fill", function (d) { return color((d.children ? d : d.parent).data.key); })
                    .on("click", click)
                  .append("title")
                    .text(function (d) { return (d.data.key == null ? "" : d.data.key) + "\nSamlet budget: " + d.value.toLocaleString(); });

                function click(d) {
                    svg.transition()
                        .duration(750)
                        .tween("scale", function () {
                            var xd = d3.interpolate(x.domain(), [d.x0, d.x1]),
                                yd = d3.interpolate(y.domain(), [d.y0, 1]),
                                yr = d3.interpolate(y.range(), [d.y0 ? 20 : 0, radius]);
                            return function (t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
                        })
                      .selectAll("path")
                        .attrTween("d", function (d) { return function () { return arc(d); }; });
                }

                d3.select(self.frameElement).style("height", height + "px");


                })();

            @*(function () {

                var fundersBudgetCsv = "@Html.Raw(HttpUtility.JavaScriptStringEncode(@ViewBag.FundersBudgetList))";
                console.log("Fundersbudgetlist raw:");
                console.log(fundersBudgetCsv);

                var table = d3.csvParse(fundersBudgetCsv);
                console.log("Parsed:");
                console.log(JSON.stringify(table));

                var nested = d3.nest()
                       .key(function (d) { return d.year; })
                       .key(function (d) { return d.funder })
                       .rollup(function (d) { return d3.sum(d, function (d) { return d.budget; }); })
                       .entries(table);

                console.log("Nested:");
                console.log(JSON.stringify(nested));

                //var funderNames = d3.set(table.map(function (d) { return d["funder"]; }).values());
                var funderNames = d3.set(table.map(function (set) { return set["funder"] })).values();
                var years = nested.map(function (set) { return set["key"] });

                console.log("funderNames: ");
                console.log(funderNames);
                console.log("Years: " + years);



                var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                      width = 700 - margin.left - margin.right,
                      height = 350 - margin.top - margin.bottom,
                      sortOrder = true;

                var color = d3.scaleOrdinal().range(TEC_colors);

                //tooltip instead of labels
                var bartooltip = d3.select("#funderBarChart").append("div").attr("class", "tooltips");
                bartooltip.append("div").attr("class", "barlabel");
                bartooltip.append("div").attr("class", "barcount");

                //X - scale years
                var x0 = d3.scaleBand()
                .range([0, width])
                .padding(0.2)
                .domain(years);

                //X - scale funders
                var x1 = d3.scaleBand()
                .range([0, x0.bandwidth()])
                .domain(funderNames);


                var y = d3.scaleLinear()
                .range([0, height])
                .domain([0, d3.max(table.map(function (set) { return +set["budget"] }))]);


                console.log("Max: " + d3.max(table.map(function(set) {return +set["budget"]})));


                var svg = d3.select("#budgetBarChart").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

                svg.append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");



                var year = svg.selectAll(".year")
                    .data(nested)
                    .enter().append("g")
                    .attr("class", "g")
                    .attr("transform", function (d) { return "translate(" + x0(d.key) + ",0)"; });

                year.selectAll("rect")
                    .data(function (d) { return d.values; })
                    .enter().append("rect")
                     .attr("width", x1.bandwidth())
                     .attr("x", function (d) { return x1(d.key); })
                     .attr("y", function (d) { return y(d.value); })
                     .attr("height", function (d) { return height - y(d.value); })
                     .style("fill", function (d) { return color(d.key); });






            })()*@


        })(window.d3)



    </script>
    


